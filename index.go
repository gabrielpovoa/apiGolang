package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"sync"
)

type Task struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
	Done  bool   `json:"done"`
}

var (
	tasks   = []Task{}
	nextID  = 1
	taskMux = &sync.Mutex{}
)

// main inicia o servidor HTTP e registra as rotas "/tasks" e
// "/tasks/{id}" para manipular a lista de tarefas. O servidor
// HTTP √© executado na porta 8080 e o seu log de erros √©
// impresso na sa da.
func main() {
	http.HandleFunc("/tasks", handleTasks)
	http.HandleFunc("/tasks/", handleTaskByID)

	fmt.Println("üöÄ Servidor rodando em http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

// Manipula requisi√ß√µes para a lista de tarefas.
func handleTasks(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		listTasks(w, r)
	case http.MethodPost:
		createTask(w, r)
	default:
		http.Error(w, "M√©todo n√£o permitido", http.StatusMethodNotAllowed)
	}
}

// Manipula requisi√ß√µes para uma tarefa espec√≠fica por seu ID.
//
// Requisi√ß√µes GET buscam uma tarefa pelo seu ID.
// Requisi√ß√µes DELETE excluem uma tarefa pelo seu ID.
//
// Caso o ID seja inv√°lido, o status 400 Bad Request √© retornado.
// Caso o ID seja v√°lido, mas a tarefa n√£o exista, o status 404 Not Found √©
// retornado.
// Caso o m√©todo seja desconhecido, o status 405 Method Not Allowed √© retornado.
func handleTaskByID(w http.ResponseWriter, r *http.Request) {
	idStr := strings.TrimPrefix(r.URL.Path, "/tasks/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "ID inv√°lido", http.StatusBadRequest)
		return
	}

	switch r.Method {
	case http.MethodGet:
		getTask(w, id)
	case http.MethodDelete:
		deleteTask(w, id)
	default:
		http.Error(w, "M√©todo n√£o permitido", http.StatusMethodNotAllowed)
	}
}

// Retorna a lista de tarefas em formato JSON.
//
// A lista de tarefas √© bloqueada para evitar que outras goroutines
// acessem enquanto a lista est√° sendo serializada.
//
// A sa√≠da da resposta √© configurada para ter o tipo de conte√∫do
// "application/json" e o conte√∫do da lista de tarefas √©
// serializado com o pacote "encoding/json".
func listTasks(w http.ResponseWriter, r *http.Request) {
	taskMux.Lock()
	defer taskMux.Unlock()

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(tasks)
}

// Cria uma nova tarefa a partir dos dados fornecidos no corpo da requisi√ß√£o.
//
// Se os dados da tarefa forem v√°lidos, um novo ID √© atribu√≠do, e a tarefa √©
// adicionada √† lista de tarefas. O status 201 Created √© retornado junto com
// os dados da nova tarefa serializada em JSON. Caso contr√°rio, o status
// 400 Bad Request √© retornado.

func createTask(w http.ResponseWriter, r *http.Request) {
	var newTask Task
	if err := json.NewDecoder(r.Body).Decode(&newTask); err != nil {
		http.Error(w, "Dados inv√°lidos", http.StatusBadRequest)
		return
	}

	taskMux.Lock()
	newTask.ID = nextID
	nextID++
	tasks = append(tasks, newTask)
	taskMux.Unlock()

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(newTask)
}

// Busca uma tarefa pelo seu id
//
// Se a tarefa for encontrada, o status 200 OK √© retornado, e o conte√∫do da
// tarefa √© serializado em JSON e enviado na resposta.
// Caso contr√°rio, o status 404 Not Found √© retornado.
func getTask(w http.ResponseWriter, id int) {
	taskMux.Lock()
	defer taskMux.Unlock()

	for _, t := range tasks {
		if t.ID == id {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(t)
			return
		}
	}

	http.NotFound(w, nil)
}

// Deleta uma tarefa pelo seu id
//
// Se a tarefa for encontrada, o status 204 No Content √© retornado.
// Caso contr√°rio, o status 404 Not Found √© retornado.
func deleteTask(w http.ResponseWriter, id int) {
	taskMux.Lock()
	defer taskMux.Unlock()

	for i, t := range tasks {
		if t.ID == id {
			tasks = append(tasks[:i], tasks[i+1:]...)
			w.WriteHeader(http.StatusNoContent)
			return
		}
	}

	http.NotFound(w, nil)
}
